Program {
  kind: "Program",
  body: [
    VariableDeclarationStatement {
      kind: 4,
      linestart: 1,
      lineend: 1,
      columnstart: 1,
      columnend: 18,
      name: "numbers",
      type: 
        Type {
          name: "",
          generics: [],
          is_inferred: 1,
        },
      value: 
        ArrayExpression {
          kind: 13,
          linestart: 1,
          lineend: 1,
          columnstart: 15,
          columnend: 16,
          elements: [

          ]
        },
      is_const: false,
      is_public: false
    },
    ForLoopStatement {
      kind: 8,
      linestart: 3,
      lineend: 5,
      columnstart: 0,
      columnend: 1,
      initializer:
        VariableDeclarationExpression {
          kind: 18,
          linestart: 3,
          lineend: 3,
          columnstart: 5,
          columnend: 14,,
          name: "i",
          type: 
            Type {
              name: "",
              generics: [],
              is_inferred: 1,
            },
          value: 
            NumberExpression {
              kind: 9,
              linestart: 3,
              lineend: 3,
              columnstart: 13,
              columnend: 14,
              value: 0.000000
            },
          is_const: false,
          is_public: false
        },
      condition:
        BinaryExpression {
          kind: 15,
          linestart: 3,
          lineend: 3,
          columnstart: 16,
          columnend: 24,
          left:
            SymbolExpression {
              kind: 11,
              linestart: 3,
              lineend: 3,
              columnstart: 16,
              columnend: 17,
              value: "i"
            },
          op: {
            kind: "LESS",
            value: "<",
            linestart: 3,
            lineend: 3,
            columnstart: 18,
            columnend: 19
          },
          right:
            NumberExpression {
              kind: 9,
              linestart: 3,
              lineend: 3,
              columnstart: 20,
              columnend: 24,
              value: 1000.000000
            }
        },
      post:
        AssignmentExpression {
          kind: 17,
          linestart: 3,
          lineend: 3,
          columnstart: 26,
          columnend: 29,,
          left:
            SymbolExpression {
              kind: 11,
              linestart: 3,
              lineend: 3,
              columnstart: 26,
              columnend: 27,
              value: "i"
            },
          op: {
            kind: "PLUS_PLUS",
            value: "++",
            linestart: 3,
            lineend: 3,
            columnstart: 27,
            columnend: 29
          },
          right:
,
          increment_decrement: true
        },
      body:
        BlockStatement {
          kind: 3,
          linestart: 3,
          lineend: 5,
          columnstart: 31,
          columnend: 1,
          body: [
            ExpressionStatement {
              kind: 2,
              linestart: 4,
              lineend: 4,
              columnstart: 2,
              columnend: 30,
              expression:
                AssignmentExpression {
                  kind: 17,
                  linestart: 4,
                  lineend: 4,
                  columnstart: 2,
                  columnend: 30,,
                  left:
                    SymbolExpression {
                      kind: 11,
                      linestart: 4,
                      lineend: 4,
                      columnstart: 2,
                      columnend: 9,
                      value: "numbers"
                    },
                  op: {
                    kind: "ASSIGNMENT",
                    value: "=",
                    linestart: 4,
                    lineend: 4,
                    columnstart: 10,
                    columnend: 11
                  },
                  right:
                    CallExpression {
                      kind: 16,
                      linestart: 4,
                      lineend: 4,
                      columnstart: 12,
                      columnend: 30,
                      function:
                        SymbolExpression {
                          kind: 11,
                          linestart: 4,
                          lineend: 4,
                          columnstart: 12,
                          columnend: 18,
                          value: "append"
                        },
                      args: [
                        SymbolExpression {
                          kind: 11,
                          linestart: 4,
                          lineend: 4,
                          columnstart: 19,
                          columnend: 26,
                          value: "numbers"
                        },
                        SymbolExpression {
                          kind: 11,
                          linestart: 4,
                          lineend: 4,
                          columnstart: 28,
                          columnend: 29,
                          value: "i"
                        }
                      ]
                    },
                  increment_decrement: false
                }
            }
          ]
        },
    ExpressionStatement {
      kind: 2,
      linestart: 6,
      lineend: 6,
      columnstart: 0,
      columnend: 14,
      expression:
        CallExpression {
          kind: 16,
          linestart: 6,
          lineend: 6,
          columnstart: 0,
          columnend: 14,
          function:
            SymbolExpression {
              kind: 11,
              linestart: 6,
              lineend: 6,
              columnstart: 0,
              columnend: 5,
              value: "outln"
            },
          args: [
            SymbolExpression {
              kind: 11,
              linestart: 6,
              lineend: 6,
              columnstart: 6,
              columnend: 13,
              value: "numbers"
            }
          ]
        }
    }
  ]
}
