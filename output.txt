Program {
  kind: "Program",
  body: [
    VariableDeclarationStatement {
      kind: 4,
      linestart: 2,
      lineend: 2,
      columnstart: 0,
      columnend: 14,
      name: "nums",
      type: 
        Type {
          name: "",
          generics: [],
          is_inferred: 1,
        },
      value: 
        ArrayExpression {
          kind: 13,
          linestart: 2,
          lineend: 2,
          columnstart: 11,
          columnend: 12,
          elements: [

          ]
        },
      is_const: false,
      is_public: false
    },
    ExpressionStatement {
      kind: 2,
      linestart: 3,
      lineend: 3,
      columnstart: 0,
      columnend: 28,
      expression:
        CallExpression {
          kind: 16,
          linestart: 3,
          lineend: 3,
          columnstart: 0,
          columnend: 28,
          function:
            SymbolExpression {
              kind: 11,
              linestart: 3,
              lineend: 3,
              columnstart: 0,
              columnend: 5,
              value: "outln"
            },
          args: [
            StringExpression {
              kind: 12,
              linestart: 3,
              lineend: 3,
              columnstart: 6,
              columnend: 21,
              value: "nums before: "
            },
            SymbolExpression {
              kind: 11,
              linestart: 3,
              lineend: 3,
              columnstart: 23,
              columnend: 27,
              value: "nums"
            }
          ]
        }
    },
    ForLoopStatement {
      kind: 8,
      linestart: 4,
      lineend: 6,
      columnstart: 0,
      columnend: 1,
      initializer:
        VariableDeclarationExpression {
          kind: 18,
          linestart: 4,
          lineend: 4,
          columnstart: 5,
          columnend: 14,,
          name: "i",
          type: 
            Type {
              name: "",
              generics: [],
              is_inferred: 1,
            },
          value: 
            NumberExpression {
              kind: 9,
              linestart: 4,
              lineend: 4,
              columnstart: 13,
              columnend: 14,
              value: 0.000000
            },
          is_const: false,
          is_public: false
        },
      condition:
        BinaryExpression {
          kind: 15,
          linestart: 4,
          lineend: 4,
          columnstart: 16,
          columnend: 22,
          left:
            SymbolExpression {
              kind: 11,
              linestart: 4,
              lineend: 4,
              columnstart: 16,
              columnend: 17,
              value: "i"
            },
          op: {
            kind: "LESS",
            value: "<",
            linestart: 4,
            lineend: 4,
            columnstart: 18,
            columnend: 19
          },
          right:
            NumberExpression {
              kind: 9,
              linestart: 4,
              lineend: 4,
              columnstart: 20,
              columnend: 22,
              value: 10.000000
            }
        },
      post:
        AssignmentExpression {
          kind: 17,
          linestart: 4,
          lineend: 4,
          columnstart: 24,
          columnend: 27,,
          left:
            SymbolExpression {
              kind: 11,
              linestart: 4,
              lineend: 4,
              columnstart: 24,
              columnend: 25,
              value: "i"
            },
          op: {
            kind: "PLUS_PLUS",
            value: "++",
            linestart: 4,
            lineend: 4,
            columnstart: 25,
            columnend: 27
          },
          right:
,
          increment_decrement: true
        },
      body:
        BlockStatement {
          kind: 3,
          linestart: 4,
          lineend: 6,
          columnstart: 29,
          columnend: 1,
          body: [
            ExpressionStatement {
              kind: 2,
              linestart: 5,
              lineend: 5,
              columnstart: 2,
              columnend: 14,
              expression:
                CallExpression {
                  kind: 16,
                  linestart: 5,
                  lineend: 5,
                  columnstart: 2,
                  columnend: 14,
                  function:
                    MemberExpression {
                      kind: 19,
                      linestart: 5,
                      lineend: 5,
                      columnstart: 2,
                      columnend: 11,,
                      object:
                        SymbolExpression {
                          kind: 11,
                          linestart: 5,
                          lineend: 5,
                          columnstart: 2,
                          columnend: 6,
                          value: "nums"
                        },
                      property:
                        SymbolExpression {
                          kind: 11,
                          linestart: 5,
                          lineend: 5,
                          columnstart: 7,
                          columnend: 11,
                          value: "push"
                        }
                    },
                  args: [
                    SymbolExpression {
                      kind: 11,
                      linestart: 5,
                      lineend: 5,
                      columnstart: 12,
                      columnend: 13,
                      value: "i"
                    }
                  ]
                }
            }
          ]
        },
    ExpressionStatement {
      kind: 2,
      linestart: 7,
      lineend: 7,
      columnstart: 0,
      columnend: 27,
      expression:
        CallExpression {
          kind: 16,
          linestart: 7,
          lineend: 7,
          columnstart: 0,
          columnend: 27,
          function:
            SymbolExpression {
              kind: 11,
              linestart: 7,
              lineend: 7,
              columnstart: 0,
              columnend: 5,
              value: "outln"
            },
          args: [
            StringExpression {
              kind: 12,
              linestart: 7,
              lineend: 7,
              columnstart: 6,
              columnend: 20,
              value: "nums after: "
            },
            SymbolExpression {
              kind: 11,
              linestart: 7,
              lineend: 7,
              columnstart: 22,
              columnend: 26,
              value: "nums"
            }
          ]
        }
    }
  ]
}
