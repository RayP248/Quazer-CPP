Program {
  kind: "Program",
  body: [
    VariableDeclarationStatement {
      kind: 4,
      linestart: 2,
      lineend: 2,
      columnstart: 0,
      columnend: 24,
      name: "x",
      type: 
        Type {
          name: "",
          generics: [],
          is_inferred: 1,
        },
      value: 
        BinaryExpression {
          kind: 15,
          linestart: 2,
          lineend: 2,
          columnstart: 18,
          columnend: 23,
          left:
            NumberExpression {
              kind: 9,
              linestart: 2,
              lineend: 2,
              columnstart: 18,
              columnend: 19,
              value: 1.000000
            },
          op: {
            kind: "PLUS",
            value: "+",
            linestart: 2,
            lineend: 2,
            columnstart: 20,
            columnend: 21
          },
          right:
            NumberExpression {
              kind: 9,
              linestart: 2,
              lineend: 2,
              columnstart: 22,
              columnend: 23,
              value: 1.000000
            }
        },
      is_const: false,
      is_public: false
    },
    VariableDeclarationStatement {
      kind: 4,
      linestart: 2,
      lineend: 2,
      columnstart: 25,
      columnend: 47,
      name: "one",
      type: 
        Type {
          name: "string",
          generics: [],
          is_inferred: 1,
        },
      value: 
        StringExpression {
          kind: 12,
          linestart: 2,
          lineend: 2,
          columnstart: 43,
          columnend: 46,
          value: "1"
        },
      is_const: false,
      is_public: false
    },
    FunctionDeclarationStatement {
      kind: 6,
      linestart: 3,
      lineend: 3,
      columnstart: 0,
      columnend: 51,
      name: "add",
      parameters: [
        ExpressionStatement {
          kind: 2,
          linestart: 3,
          lineend: 0,
          columnstart: 7,
          columnend: 0,
          name: "x",
          type: 
            Type {
              name: "number",
              generics: [],
              is_inferred: 1,
            }
        }
      ],
      body: 
        BlockStatement {
          kind: 3,
          linestart: 3,
          lineend: 3,
          columnstart: 28,
          columnend: 51,
          body: [
            ReturnStatement {
              kind: 5,
              linestart: 3,
              lineend: 3,
              columnstart: 30,
              columnend: 49,
              value:
                BinaryExpression {
                  kind: 15,
                  linestart: 3,
                  lineend: 3,
                  columnstart: 37,
                  columnend: 48,
                  left:
                    SymbolExpression {
                      kind: 11,
                      linestart: 3,
                      lineend: 3,
                      columnstart: 37,
                      columnend: 38,
                      value: "x"
                    },
                  op: {
                    kind: "PLUS",
                    value: "+",
                    linestart: 3,
                    lineend: 3,
                    columnstart: 39,
                    columnend: 40
                  },
                  right:
                    MemberExpression {
                      kind: 19,
                      linestart: 3,
                      lineend: 3,
                      columnstart: 41,
                      columnend: 48,,
                      object:
                        SymbolExpression {
                          kind: 11,
                          linestart: 3,
                          lineend: 3,
                          columnstart: 41,
                          columnend: 44,
                          value: "one"
                        },
                      property:
                        SymbolExpression {
                          kind: 11,
                          linestart: 3,
                          lineend: 3,
                          columnstart: 45,
                          columnend: 48,
                          value: "num"
                        }
                    }
                }
            }
          ]
        },
      return_type: 
        Type {
          name: "number",
          generics: [],
          is_inferred: 1,
        }
      return_statement: nullptr
    },
    VariableDeclarationStatement {
      kind: 4,
      linestart: 4,
      lineend: 4,
      columnstart: 0,
      columnend: 28,
      name: "addRes",
      type: 
        Type {
          name: "number",
          generics: [],
          is_inferred: 1,
        },
      value: 
        CallExpression {
          kind: 16,
          linestart: 4,
          lineend: 4,
          columnstart: 21,
          columnend: 27,
          function:
            SymbolExpression {
              kind: 11,
              linestart: 4,
              lineend: 4,
              columnstart: 21,
              columnend: 24,
              value: "add"
            },
          args: [
            NumberExpression {
              kind: 9,
              linestart: 4,
              lineend: 4,
              columnstart: 25,
              columnend: 26,
              value: 1.000000
            }
          ]
        },
      is_const: false,
      is_public: false
    },
    IfStatement {
      kind: 7,
      linestart: 5,
      lineend: 5,
      columnstart: 0,
      columnend: 37,
      condition:
        BinaryExpression {
          kind: 15,
          linestart: 5,
          lineend: 5,
          columnstart: 3,
          columnend: 14,
          left:
            SymbolExpression {
              kind: 11,
              linestart: 5,
              lineend: 5,
              columnstart: 3,
              columnend: 4,
              value: "x"
            },
          op: {
            kind: "EQUAL",
            value: "==",
            linestart: 5,
            lineend: 5,
            columnstart: 5,
            columnend: 7
          },
          right:
            SymbolExpression {
              kind: 11,
              linestart: 5,
              lineend: 5,
              columnstart: 8,
              columnend: 14,
              value: "addRes"
            }
        },
      then_branch:
        BlockStatement {
          kind: 3,
          linestart: 5,
          lineend: 5,
          columnstart: 16,
          columnend: 37,
          body: [
            ExpressionStatement {
              kind: 2,
              linestart: 5,
              lineend: 5,
              columnstart: 18,
              columnend: 34,
              expression:
                CallExpression {
                  kind: 16,
                  linestart: 5,
                  lineend: 5,
                  columnstart: 18,
                  columnend: 34,
                  function:
                    SymbolExpression {
                      kind: 11,
                      linestart: 5,
                      lineend: 5,
                      columnstart: 18,
                      columnend: 23,
                      value: "outln"
                    },
                  args: [
                    StringExpression {
                      kind: 12,
                      linestart: 5,
                      lineend: 5,
                      columnstart: 24,
                      columnend: 33,
                      value: "matches"
                    }
                  ]
                }
            }
          ]
        },
      else_if_branch:

  ]
}
