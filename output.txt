Program {
  kind: "Program",
  body: [
    FunctionDeclarationStatement {
      kind: 6,
      linestart: 1,
      lineend: 9,
      columnstart: 1,
      columnend: 1,
      name: "power",
      parameters: [
        ExpressionStatement {
          kind: 2,
          linestart: 1,
          lineend: 0,
          columnstart: 11,
          columnend: 0,
          name: "base",
          type: 
            Type {
              name: "number",
              generics: [],
              is_inferred: 1,
            }
        },
        ExpressionStatement {
          kind: 2,
          linestart: 1,
          lineend: 0,
          columnstart: 25,
          columnend: 0,
          name: "exp",
          type: 
            Type {
              name: "number",
              generics: [],
              is_inferred: 1,
            }
        }
      ],
      body: 
        BlockStatement {
          kind: 3,
          linestart: 1,
          lineend: 9,
          columnstart: 48,
          columnend: 1,
          body: [
            IfStatement {
              kind: 7,
              linestart: 2,
              lineend: 2,
              columnstart: 2,
              columnend: 27,
              condition:
                BinaryExpression {
                  kind: 12,
                  linestart: 2,
                  lineend: 2,
                  columnstart: 5,
                  columnend: 13,
                  left:
                    SymbolExpression {
                      kind: 10,
                      linestart: 2,
                      lineend: 2,
                      columnstart: 5,
                      columnend: 8,
                      value: "exp"
                    },
                  op: {
                    kind: "EQUAL",
                    value: "==",
                    linestart: 2,
                    lineend: 2,
                    columnstart: 9,
                    columnend: 11
                  },
                  right:
                    NumberExpression {
                      kind: 9,
                      linestart: 2,
                      lineend: 2,
                      columnstart: 12,
                      columnend: 13,
                      value: 0.000000
                    }
                },
              then_branch:
                BlockStatement {
                  kind: 3,
                  linestart: 2,
                  lineend: 2,
                  columnstart: 14,
                  columnend: 27,
                  body: [
                    ReturnStatement {
                      kind: 5,
                      linestart: 2,
                      lineend: 2,
                      columnstart: 16,
                      columnend: 25,
                      value:
                        NumberExpression {
                          kind: 9,
                          linestart: 2,
                          lineend: 2,
                          columnstart: 23,
                          columnend: 24,
                          value: 1.000000
                        }
                    }
                  ]
                },
              else_if_branch:
,
            VariableDeclarationStatement {
              kind: 4,
              linestart: 3,
              lineend: 3,
              columnstart: 2,
              columnend: 23,
              name: "b",
              type: 
                Type {
                  name: "number",
                  generics: [],
                  is_inferred: 1,
                },
              value: 
                SymbolExpression {
                  kind: 10,
                  linestart: 3,
                  lineend: 3,
                  columnstart: 18,
                  columnend: 22,
                  value: "base"
                },
              is_const: false,
              is_public: false
            },
            ForLoopStatement {
              kind: 8,
              linestart: 4,
              lineend: 6,
              columnstart: 2,
              columnend: 3,
              initializer:
                VariableDeclarationExpression {
                  kind: 15,
                  linestart: 4,
                  lineend: 4,
                  columnstart: 7,
                  columnend: 17,,
                  name: "i",
                  type: 
                    Type {
                      name: "",
                      generics: [],
                      is_inferred: 1,
                    },
                  value: 
                    NumberExpression {
                      kind: 9,
                      linestart: 4,
                      lineend: 4,
                      columnstart: 15,
                      columnend: 16,
                      value: 1.000000
                    },
                  is_const: false,
                  is_public: false
                },
              condition:
                BinaryExpression {
                  kind: 12,
                  linestart: 4,
                  lineend: 4,
                  columnstart: 18,
                  columnend: 25,
                  left:
                    SymbolExpression {
                      kind: 10,
                      linestart: 4,
                      lineend: 4,
                      columnstart: 18,
                      columnend: 19,
                      value: "i"
                    },
                  op: {
                    kind: "LESS",
                    value: "<",
                    linestart: 4,
                    lineend: 4,
                    columnstart: 20,
                    columnend: 21
                  },
                  right:
                    SymbolExpression {
                      kind: 10,
                      linestart: 4,
                      lineend: 4,
                      columnstart: 22,
                      columnend: 25,
                      value: "exp"
                    }
                },
              post:
                AssignmentExpression {
                  kind: 14,
                  linestart: 4,
                  lineend: 4,
                  columnstart: 27,
                  columnend: 30,,
                  left:
                    SymbolExpression {
                      kind: 10,
                      linestart: 4,
                      lineend: 4,
                      columnstart: 27,
                      columnend: 28,
                      value: "i"
                    },
                  op: {
                    kind: "PLUS_PLUS",
                    value: "++",
                    linestart: 4,
                    lineend: 4,
                    columnstart: 28,
                    columnend: 30
                  },
                  right:
,
                  increment_decrement: true
                },
              body:
                BlockStatement {
                  kind: 3,
                  linestart: 4,
                  lineend: 6,
                  columnstart: 32,
                  columnend: 3,
                  body: [
                    ExpressionStatement {
                      kind: 2,
                      linestart: 5,
                      lineend: 5,
                      columnstart: 4,
                      columnend: 16,
                      expression:
                        AssignmentExpression {
                          kind: 14,
                          linestart: 5,
                          lineend: 5,
                          columnstart: 4,
                          columnend: 16,,
                          left:
                            SymbolExpression {
                              kind: 10,
                              linestart: 5,
                              lineend: 5,
                              columnstart: 4,
                              columnend: 5,
                              value: "b"
                            },
                          op: {
                            kind: "ASSIGNMENT",
                            value: "=",
                            linestart: 5,
                            lineend: 5,
                            columnstart: 6,
                            columnend: 7
                          },
                          right:
                            BinaryExpression {
                              kind: 12,
                              linestart: 5,
                              lineend: 5,
                              columnstart: 8,
                              columnend: 16,
                              left:
                                SymbolExpression {
                                  kind: 10,
                                  linestart: 5,
                                  lineend: 5,
                                  columnstart: 8,
                                  columnend: 12,
                                  value: "base"
                                },
                              op: {
                                kind: "STAR",
                                value: "*",
                                linestart: 5,
                                lineend: 5,
                                columnstart: 13,
                                columnend: 14
                              },
                              right:
                                SymbolExpression {
                                  kind: 10,
                                  linestart: 5,
                                  lineend: 5,
                                  columnstart: 15,
                                  columnend: 16,
                                  value: "b"
                                }
                            },
                          increment_decrement: false
                        }
                    }
                  ]
                },
            ReturnStatement {
              kind: 5,
              linestart: 8,
              lineend: 8,
              columnstart: 2,
              columnend: 11,
              value:
                SymbolExpression {
                  kind: 10,
                  linestart: 8,
                  lineend: 8,
                  columnstart: 9,
                  columnend: 10,
                  value: "b"
                }
            }
          ]
        },
      return_type: 
        Type {
          name: "number",
          generics: [],
          is_inferred: 1,
        }
      return_statement: nullptr
    },
    FunctionDeclarationStatement {
      kind: 6,
      linestart: 11,
      lineend: 26,
      columnstart: 0,
      columnend: 1,
      name: "fib",
      parameters: [
        ExpressionStatement {
          kind: 2,
          linestart: 11,
          lineend: 0,
          columnstart: 8,
          columnend: 0,
          name: "n",
          type: 
            Type {
              name: "number",
              generics: [],
              is_inferred: 1,
            }
        }
      ],
      body: 
        BlockStatement {
          kind: 3,
          linestart: 11,
          lineend: 26,
          columnstart: 29,
          columnend: 1,
          body: [
            IfStatement {
              kind: 7,
              linestart: 12,
              lineend: 12,
              columnstart: 2,
              columnend: 25,
              condition:
                BinaryExpression {
                  kind: 12,
                  linestart: 12,
                  lineend: 12,
                  columnstart: 5,
                  columnend: 11,
                  left:
                    SymbolExpression {
                      kind: 10,
                      linestart: 12,
                      lineend: 12,
                      columnstart: 5,
                      columnend: 6,
                      value: "n"
                    },
                  op: {
                    kind: "EQUAL",
                    value: "==",
                    linestart: 12,
                    lineend: 12,
                    columnstart: 7,
                    columnend: 9
                  },
                  right:
                    NumberExpression {
                      kind: 9,
                      linestart: 12,
                      lineend: 12,
                      columnstart: 10,
                      columnend: 11,
                      value: 0.000000
                    }
                },
              then_branch:
                BlockStatement {
                  kind: 3,
                  linestart: 12,
                  lineend: 12,
                  columnstart: 12,
                  columnend: 25,
                  body: [
                    ReturnStatement {
                      kind: 5,
                      linestart: 12,
                      lineend: 12,
                      columnstart: 14,
                      columnend: 23,
                      value:
                        NumberExpression {
                          kind: 9,
                          linestart: 12,
                          lineend: 12,
                          columnstart: 21,
                          columnend: 22,
                          value: 0.000000
                        }
                    }
                  ]
                },
              else_if_branch:
,
            IfStatement {
              kind: 7,
              linestart: 13,
              lineend: 13,
              columnstart: 2,
              columnend: 25,
              condition:
                BinaryExpression {
                  kind: 12,
                  linestart: 13,
                  lineend: 13,
                  columnstart: 5,
                  columnend: 11,
                  left:
                    SymbolExpression {
                      kind: 10,
                      linestart: 13,
                      lineend: 13,
                      columnstart: 5,
                      columnend: 6,
                      value: "n"
                    },
                  op: {
                    kind: "EQUAL",
                    value: "==",
                    linestart: 13,
                    lineend: 13,
                    columnstart: 7,
                    columnend: 9
                  },
                  right:
                    NumberExpression {
                      kind: 9,
                      linestart: 13,
                      lineend: 13,
                      columnstart: 10,
                      columnend: 11,
                      value: 1.000000
                    }
                },
              then_branch:
                BlockStatement {
                  kind: 3,
                  linestart: 13,
                  lineend: 13,
                  columnstart: 12,
                  columnend: 25,
                  body: [
                    ReturnStatement {
                      kind: 5,
                      linestart: 13,
                      lineend: 13,
                      columnstart: 14,
                      columnend: 23,
                      value:
                        NumberExpression {
                          kind: 9,
                          linestart: 13,
                          lineend: 13,
                          columnstart: 21,
                          columnend: 22,
                          value: 1.000000
                        }
                    }
                  ]
                },
              else_if_branch:
,
            VariableDeclarationStatement {
              kind: 4,
              linestart: 15,
              lineend: 15,
              columnstart: 2,
              columnend: 20,
              name: "a",
              type: 
                Type {
                  name: "number",
                  generics: [],
                  is_inferred: 1,
                },
              value: 
                NumberExpression {
                  kind: 9,
                  linestart: 15,
                  lineend: 15,
                  columnstart: 18,
                  columnend: 19,
                  value: 0.000000
                },
              is_const: false,
              is_public: false
            },
            VariableDeclarationStatement {
              kind: 4,
              linestart: 16,
              lineend: 16,
              columnstart: 2,
              columnend: 20,
              name: "b",
              type: 
                Type {
                  name: "number",
                  generics: [],
                  is_inferred: 1,
                },
              value: 
                NumberExpression {
                  kind: 9,
                  linestart: 16,
                  lineend: 16,
                  columnstart: 18,
                  columnend: 19,
                  value: 1.000000
                },
              is_const: false,
              is_public: false
            },
            VariableDeclarationStatement {
              kind: 4,
              linestart: 17,
              lineend: 17,
              columnstart: 2,
              columnend: 20,
              name: "c",
              type: 
                Type {
                  name: "number",
                  generics: [],
                  is_inferred: 1,
                },
              value: 
                NumberExpression {
                  kind: 9,
                  linestart: 17,
                  lineend: 17,
                  columnstart: 18,
                  columnend: 19,
                  value: 0.000000
                },
              is_const: false,
              is_public: false
            },
            ForLoopStatement {
              kind: 8,
              linestart: 19,
              lineend: 23,
              columnstart: 2,
              columnend: 3,
              initializer:
                VariableDeclarationExpression {
                  kind: 15,
                  linestart: 19,
                  lineend: 19,
                  columnstart: 7,
                  columnend: 17,,
                  name: "i",
                  type: 
                    Type {
                      name: "",
                      generics: [],
                      is_inferred: 1,
                    },
                  value: 
                    NumberExpression {
                      kind: 9,
                      linestart: 19,
                      lineend: 19,
                      columnstart: 15,
                      columnend: 16,
                      value: 1.000000
                    },
                  is_const: false,
                  is_public: false
                },
              condition:
                BinaryExpression {
                  kind: 12,
                  linestart: 19,
                  lineend: 19,
                  columnstart: 18,
                  columnend: 23,
                  left:
                    SymbolExpression {
                      kind: 10,
                      linestart: 19,
                      lineend: 19,
                      columnstart: 18,
                      columnend: 19,
                      value: "i"
                    },
                  op: {
                    kind: "LESS",
                    value: "<",
                    linestart: 19,
                    lineend: 19,
                    columnstart: 20,
                    columnend: 21
                  },
                  right:
                    SymbolExpression {
                      kind: 10,
                      linestart: 19,
                      lineend: 19,
                      columnstart: 22,
                      columnend: 23,
                      value: "n"
                    }
                },
              post:
                AssignmentExpression {
                  kind: 14,
                  linestart: 19,
                  lineend: 19,
                  columnstart: 25,
                  columnend: 28,,
                  left:
                    SymbolExpression {
                      kind: 10,
                      linestart: 19,
                      lineend: 19,
                      columnstart: 25,
                      columnend: 26,
                      value: "i"
                    },
                  op: {
                    kind: "PLUS_PLUS",
                    value: "++",
                    linestart: 19,
                    lineend: 19,
                    columnstart: 26,
                    columnend: 28
                  },
                  right:
,
                  increment_decrement: true
                },
              body:
                BlockStatement {
                  kind: 3,
                  linestart: 19,
                  lineend: 23,
                  columnstart: 30,
                  columnend: 3,
                  body: [
                    ExpressionStatement {
                      kind: 2,
                      linestart: 20,
                      lineend: 20,
                      columnstart: 4,
                      columnend: 13,
                      expression:
                        AssignmentExpression {
                          kind: 14,
                          linestart: 20,
                          lineend: 20,
                          columnstart: 4,
                          columnend: 13,,
                          left:
                            SymbolExpression {
                              kind: 10,
                              linestart: 20,
                              lineend: 20,
                              columnstart: 4,
                              columnend: 5,
                              value: "c"
                            },
                          op: {
                            kind: "ASSIGNMENT",
                            value: "=",
                            linestart: 20,
                            lineend: 20,
                            columnstart: 6,
                            columnend: 7
                          },
                          right:
                            BinaryExpression {
                              kind: 12,
                              linestart: 20,
                              lineend: 20,
                              columnstart: 8,
                              columnend: 13,
                              left:
                                SymbolExpression {
                                  kind: 10,
                                  linestart: 20,
                                  lineend: 20,
                                  columnstart: 8,
                                  columnend: 9,
                                  value: "a"
                                },
                              op: {
                                kind: "PLUS",
                                value: "+",
                                linestart: 20,
                                lineend: 20,
                                columnstart: 10,
                                columnend: 11
                              },
                              right:
                                SymbolExpression {
                                  kind: 10,
                                  linestart: 20,
                                  lineend: 20,
                                  columnstart: 12,
                                  columnend: 13,
                                  value: "b"
                                }
                            },
                          increment_decrement: false
                        }
                    },
                    ExpressionStatement {
                      kind: 2,
                      linestart: 21,
                      lineend: 21,
                      columnstart: 4,
                      columnend: 9,
                      expression:
                        AssignmentExpression {
                          kind: 14,
                          linestart: 21,
                          lineend: 21,
                          columnstart: 4,
                          columnend: 9,,
                          left:
                            SymbolExpression {
                              kind: 10,
                              linestart: 21,
                              lineend: 21,
                              columnstart: 4,
                              columnend: 5,
                              value: "a"
                            },
                          op: {
                            kind: "ASSIGNMENT",
                            value: "=",
                            linestart: 21,
                            lineend: 21,
                            columnstart: 6,
                            columnend: 7
                          },
                          right:
                            SymbolExpression {
                              kind: 10,
                              linestart: 21,
                              lineend: 21,
                              columnstart: 8,
                              columnend: 9,
                              value: "b"
                            },
                          increment_decrement: false
                        }
                    },
                    ExpressionStatement {
                      kind: 2,
                      linestart: 22,
                      lineend: 22,
                      columnstart: 4,
                      columnend: 9,
                      expression:
                        AssignmentExpression {
                          kind: 14,
                          linestart: 22,
                          lineend: 22,
                          columnstart: 4,
                          columnend: 9,,
                          left:
                            SymbolExpression {
                              kind: 10,
                              linestart: 22,
                              lineend: 22,
                              columnstart: 4,
                              columnend: 5,
                              value: "b"
                            },
                          op: {
                            kind: "ASSIGNMENT",
                            value: "=",
                            linestart: 22,
                            lineend: 22,
                            columnstart: 6,
                            columnend: 7
                          },
                          right:
                            SymbolExpression {
                              kind: 10,
                              linestart: 22,
                              lineend: 22,
                              columnstart: 8,
                              columnend: 9,
                              value: "c"
                            },
                          increment_decrement: false
                        }
                    }
                  ]
                },
            ReturnStatement {
              kind: 5,
              linestart: 25,
              lineend: 25,
              columnstart: 2,
              columnend: 11,
              value:
                SymbolExpression {
                  kind: 10,
                  linestart: 25,
                  lineend: 25,
                  columnstart: 9,
                  columnend: 10,
                  value: "c"
                }
            }
          ]
        },
      return_type: 
        Type {
          name: "number",
          generics: [],
          is_inferred: 1,
        }
      return_statement: nullptr
    },
    ExpressionStatement {
      kind: 2,
      linestart: 27,
      lineend: 27,
      columnstart: 0,
      columnend: 22,
      expression:
        CallExpression {
          kind: 13,
          linestart: 27,
          lineend: 27,
          columnstart: 0,
          columnend: 22,
          function:
            SymbolExpression {
              kind: 10,
              linestart: 27,
              lineend: 27,
              columnstart: 0,
              columnend: 3,
              value: "out"
            },
          args: [
            StringExpression {
              kind: 11,
              linestart: 27,
              lineend: 27,
              columnstart: 4,
              columnend: 21,
              value: "fib up to 10:\n"
            }
          ]
        }
    },
    ForLoopStatement {
      kind: 8,
      linestart: 28,
      lineend: 30,
      columnstart: 0,
      columnend: 1,
      initializer:
        VariableDeclarationExpression {
          kind: 15,
          linestart: 28,
          lineend: 28,
          columnstart: 5,
          columnend: 23,,
          name: "i",
          type: 
            Type {
              name: "number",
              generics: [],
              is_inferred: 1,
            },
          value: 
            NumberExpression {
              kind: 9,
              linestart: 28,
              lineend: 28,
              columnstart: 21,
              columnend: 22,
              value: 0.000000
            },
          is_const: false,
          is_public: false
        },
      condition:
        BinaryExpression {
          kind: 12,
          linestart: 28,
          lineend: 28,
          columnstart: 24,
          columnend: 31,
          left:
            SymbolExpression {
              kind: 10,
              linestart: 28,
              lineend: 28,
              columnstart: 24,
              columnend: 25,
              value: "i"
            },
          op: {
            kind: "LESS_EQUAL",
            value: "<=",
            linestart: 28,
            lineend: 28,
            columnstart: 26,
            columnend: 28
          },
          right:
            NumberExpression {
              kind: 9,
              linestart: 28,
              lineend: 28,
              columnstart: 29,
              columnend: 31,
              value: 10.000000
            }
        },
      post:
        AssignmentExpression {
          kind: 14,
          linestart: 28,
          lineend: 28,
          columnstart: 33,
          columnend: 36,,
          left:
            SymbolExpression {
              kind: 10,
              linestart: 28,
              lineend: 28,
              columnstart: 33,
              columnend: 34,
              value: "i"
            },
          op: {
            kind: "PLUS_PLUS",
            value: "++",
            linestart: 28,
            lineend: 28,
            columnstart: 34,
            columnend: 36
          },
          right:
,
          increment_decrement: true
        },
      body:
        BlockStatement {
          kind: 3,
          linestart: 28,
          lineend: 30,
          columnstart: 38,
          columnend: 1,
          body: [
            ExpressionStatement {
              kind: 2,
              linestart: 29,
              lineend: 29,
              columnstart: 2,
              columnend: 39,
              expression:
                CallExpression {
                  kind: 13,
                  linestart: 29,
                  lineend: 29,
                  columnstart: 2,
                  columnend: 39,
                  function:
                    SymbolExpression {
                      kind: 10,
                      linestart: 29,
                      lineend: 29,
                      columnstart: 2,
                      columnend: 5,
                      value: "out"
                    },
                  args: [
                    StringExpression {
                      kind: 11,
                      linestart: 29,
                      lineend: 29,
                      columnstart: 6,
                      columnend: 13,
                      value: "fib ("
                    },
                    SymbolExpression {
                      kind: 10,
                      linestart: 29,
                      lineend: 29,
                      columnstart: 15,
                      columnend: 16,
                      value: "i"
                    },
                    StringExpression {
                      kind: 11,
                      linestart: 29,
                      lineend: 29,
                      columnstart: 18,
                      columnend: 24,
                      value: ") = "
                    },
                    CallExpression {
                      kind: 13,
                      linestart: 29,
                      lineend: 29,
                      columnstart: 26,
                      columnend: 32,
                      function:
                        SymbolExpression {
                          kind: 10,
                          linestart: 29,
                          lineend: 29,
                          columnstart: 26,
                          columnend: 29,
                          value: "fib"
                        },
                      args: [
                        SymbolExpression {
                          kind: 10,
                          linestart: 29,
                          lineend: 29,
                          columnstart: 30,
                          columnend: 31,
                          value: "i"
                        }
                      ]
                    },
                    StringExpression {
                      kind: 11,
                      linestart: 29,
                      lineend: 29,
                      columnstart: 34,
                      columnend: 38,
                      value: "\n"
                    }
                  ]
                }
            }
          ]
        },
    ExpressionStatement {
      kind: 2,
      linestart: 31,
      lineend: 31,
      columnstart: 0,
      columnend: 33,
      expression:
        CallExpression {
          kind: 13,
          linestart: 31,
          lineend: 31,
          columnstart: 0,
          columnend: 33,
          function:
            SymbolExpression {
              kind: 10,
              linestart: 31,
              lineend: 31,
              columnstart: 0,
              columnend: 3,
              value: "out"
            },
          args: [
            StringExpression {
              kind: 11,
              linestart: 31,
              lineend: 31,
              columnstart: 4,
              columnend: 32,
              value: "------------------------\n"
            }
          ]
        }
    },
    ExpressionStatement {
      kind: 2,
      linestart: 32,
      lineend: 32,
      columnstart: 0,
      columnend: 24,
      expression:
        CallExpression {
          kind: 13,
          linestart: 32,
          lineend: 32,
          columnstart: 0,
          columnend: 24,
          function:
            SymbolExpression {
              kind: 10,
              linestart: 32,
              lineend: 32,
              columnstart: 0,
              columnend: 3,
              value: "out"
            },
          args: [
            StringExpression {
              kind: 11,
              linestart: 32,
              lineend: 32,
              columnstart: 4,
              columnend: 23,
              value: "power up to 10:\n"
            }
          ]
        }
    },
    ForLoopStatement {
      kind: 8,
      linestart: 33,
      lineend: 35,
      columnstart: 0,
      columnend: 1,
      initializer:
        VariableDeclarationExpression {
          kind: 15,
          linestart: 33,
          lineend: 33,
          columnstart: 5,
          columnend: 23,,
          name: "j",
          type: 
            Type {
              name: "number",
              generics: [],
              is_inferred: 1,
            },
          value: 
            NumberExpression {
              kind: 9,
              linestart: 33,
              lineend: 33,
              columnstart: 21,
              columnend: 22,
              value: 0.000000
            },
          is_const: false,
          is_public: false
        },
      condition:
        BinaryExpression {
          kind: 12,
          linestart: 33,
          lineend: 33,
          columnstart: 24,
          columnend: 31,
          left:
            SymbolExpression {
              kind: 10,
              linestart: 33,
              lineend: 33,
              columnstart: 24,
              columnend: 25,
              value: "j"
            },
          op: {
            kind: "LESS_EQUAL",
            value: "<=",
            linestart: 33,
            lineend: 33,
            columnstart: 26,
            columnend: 28
          },
          right:
            NumberExpression {
              kind: 9,
              linestart: 33,
              lineend: 33,
              columnstart: 29,
              columnend: 31,
              value: 10.000000
            }
        },
      post:
        AssignmentExpression {
          kind: 14,
          linestart: 33,
          lineend: 33,
          columnstart: 33,
          columnend: 36,,
          left:
            SymbolExpression {
              kind: 10,
              linestart: 33,
              lineend: 33,
              columnstart: 33,
              columnend: 34,
              value: "j"
            },
          op: {
            kind: "PLUS_PLUS",
            value: "++",
            linestart: 33,
            lineend: 33,
            columnstart: 34,
            columnend: 36
          },
          right:
,
          increment_decrement: true
        },
      body:
        BlockStatement {
          kind: 3,
          linestart: 33,
          lineend: 35,
          columnstart: 38,
          columnend: 1,
          body: [
            ExpressionStatement {
              kind: 2,
              linestart: 34,
              lineend: 34,
              columnstart: 2,
              columnend: 46,
              expression:
                CallExpression {
                  kind: 13,
                  linestart: 34,
                  lineend: 34,
                  columnstart: 2,
                  columnend: 46,
                  function:
                    SymbolExpression {
                      kind: 10,
                      linestart: 34,
                      lineend: 34,
                      columnstart: 2,
                      columnend: 5,
                      value: "out"
                    },
                  args: [
                    StringExpression {
                      kind: 11,
                      linestart: 34,
                      lineend: 34,
                      columnstart: 6,
                      columnend: 15,
                      value: "power ("
                    },
                    SymbolExpression {
                      kind: 10,
                      linestart: 34,
                      lineend: 34,
                      columnstart: 17,
                      columnend: 18,
                      value: "j"
                    },
                    StringExpression {
                      kind: 11,
                      linestart: 34,
                      lineend: 34,
                      columnstart: 20,
                      columnend: 26,
                      value: ") = "
                    },
                    CallExpression {
                      kind: 13,
                      linestart: 34,
                      lineend: 34,
                      columnstart: 28,
                      columnend: 39,
                      function:
                        SymbolExpression {
                          kind: 10,
                          linestart: 34,
                          lineend: 34,
                          columnstart: 28,
                          columnend: 33,
                          value: "power"
                        },
                      args: [
                        NumberExpression {
                          kind: 9,
                          linestart: 34,
                          lineend: 34,
                          columnstart: 34,
                          columnend: 35,
                          value: 2.000000
                        },
                        SymbolExpression {
                          kind: 10,
                          linestart: 34,
                          lineend: 34,
                          columnstart: 37,
                          columnend: 38,
                          value: "j"
                        }
                      ]
                    },
                    StringExpression {
                      kind: 11,
                      linestart: 34,
                      lineend: 34,
                      columnstart: 41,
                      columnend: 45,
                      value: "\n"
                    }
                  ]
                }
            }
          ]
        }
  ]
}
