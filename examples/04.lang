fn power (base: number, exp: number) -> number {
  if exp == 0 { return 1; }
  let b: number = base;
  for (let i = 1; i < exp; i++) {
    b = base * b;
  }

  return b;
}

fn fib (n: number) -> number {
  if n == 0 { return 0; }
  if n == 1 { return 1; }

  let a: number = 0;
  let b: number = 1;
  let c: number = 0;

  for (let i = 1; i < n; i++) {
    c = a + b;
    a = b;
    b = c;
  }

  return c;
}
out("fib up to 10:\n");
for (let i: number = 0; i <= 10; i++) {
  out("fib (", i, ") = ", fib(i), "\n");
}
out("------------------------\n");
out("power up to 10:\n");
for (let j: number = 0; j <= 10; j++) {
  out("power (", j, ") = ", power(2, j), "\n");
}
